@inject Genova.Temp.Localization.ILocalizationService LocalizationService
@inject IHttpContextAccessor HttpContextAccessor

@{
    var defaultCulture = LocalizationService.DefaultCulture.Name.ToLowerInvariant();
    var currentCulture = LocalizationService.CurrentPageCulture;
    var currentPageCulture = currentCulture.Name.ToLowerInvariant();
    var supportedCultures = LocalizationService.SupportedUICultures;
    const string MODIFY_ATTRIBUTE_PREFIX = Genova.Temp.ResponseModifiers.HtmlResponseModifier.MODIFY_ATTRIBUTE_PREFIX;

    var activeLanguages = new Dictionary<string, object?>
    {
        { "en", currentPageCulture.Equals("en", StringComparison.InvariantCultureIgnoreCase) ? new { aria_current = "language" } : default(object) },
        { "zh", currentPageCulture.Equals("zh", StringComparison.InvariantCultureIgnoreCase) ? new { aria_current = "language" } : default(object) },
        { "zh-HK", currentPageCulture.Equals("zh-HK", StringComparison.InvariantCultureIgnoreCase) ? new { aria_current = "language" } : default(object) },
        { "ar", currentPageCulture.Equals("ar", StringComparison.InvariantCultureIgnoreCase) ? new { aria_current = "language" } : default(object) },
        { "he", currentPageCulture.Equals("he", StringComparison.InvariantCultureIgnoreCase) ? new { aria_current = "language" } : default(object) },
        { "fa", currentPageCulture.Equals("fa", StringComparison.InvariantCultureIgnoreCase) ? new { aria_current = "language" } : default(object) },
        { "ur", currentPageCulture.Equals("ur", StringComparison.InvariantCultureIgnoreCase) ? new { aria_current = "language" } : default(object) },
        { "ja", currentPageCulture.Equals("ja", StringComparison.InvariantCultureIgnoreCase) ? new { aria_current = "language" } : default(object) },
        { "th", currentPageCulture.Equals("th", StringComparison.InvariantCultureIgnoreCase) ? new { aria_current = "language" } : default(object) },
        { "ko", currentPageCulture.Equals("ko", StringComparison.InvariantCultureIgnoreCase) ? new { aria_current = "language" } : default(object) },
        { "el", currentPageCulture.Equals("el", StringComparison.InvariantCultureIgnoreCase) ? new { aria_current = "language" } : default(object) },
        { "hi", currentPageCulture.Equals("hi", StringComparison.InvariantCultureIgnoreCase) ? new { aria_current = "language" } : default(object) }
    };

    var langNames = new Dictionary<string, string>
    {
        { "en", "English" },
        { "zh", "简体中文" },
        { "zh-HK", "繁體中文" },
        { "ar", "العربية" },
        { "he", "עברית" },
        { "fa", "فارسی" },
        { "ur", "اردو" },
        { "ja", "日本語" },
        { "th", "ไทย" },
        { "ko", "한국어" },
        { "el", "Ελληνικά" },
        { "hi", "हिन्दी" }
    };

    var selectorTitles = new string[,]
    {
        { "zh-HK", "選擇語言" }, // Traditional Chinese
        { "zh", "选择语言" },    // Simplified Chinese
        { "ar", "اختر اللغة" },  // Arabic
        { "he", "בחר שפה" },     // Hebrew
        { "fa", "انتخاب زبان" }, // Persian
        { "ur", "زبان منتخب کریں" }, // Urdu
        { "ja", "言語を選択" },   // Japanese
        { "th", "เลือกภาษา" },   // Thai
        { "ko", "언어 선택" },   // Korean
        { "el", "Επιλέξτε γλώσσα" }, // Greek
        { "hi", "भाषा चुनें" },   // Hindi
        { "en", "Select a language" } // English
    };

    var selectorTitle = LocalizationHelper.GetLocalizedValue(selectorTitles);

    var linkTitles = new Dictionary<string, string>
    {
        { "zh-HK", "以廣東話檢視頁面" }, // Cantonese (Traditional Chinese)
        { "zh", "以简体中文查看页面" },    // Simplified Chinese
        { "ar", "عرض الصفحة باللغة العربية" }, // Arabic
        { "he", "צפה בדף בעברית" },     // Hebrew
        { "fa", "مشاهده صفحه به فارسی" }, // Persian
        { "ur", "صفحہ اردو میں دیکھیں" }, // Urdu
        { "ja", "日本語でページを表示" },   // Japanese
        { "th", "ดูหน้าในภาษาไทย" },     // Thai
        { "ko", "한국어로 페이지 보기" },   // Korean
        { "el", "Δείτε τη σελίδα στα Ελληνικά" }, // Greek
        { "hi", "पृष्ठ हिंदी में देखें" },   // Hindi
        { "en", "View page in English" }     // English
    };

    var pagePath = LocalizationService.CurrentPagePath ?? "";
    var requestPath = HttpContextAccessor.HttpContext?.Request.Path.Value ?? "";
    var path = (!string.IsNullOrEmpty(pagePath)) ? pagePath : requestPath ?? "/";
    if (!string.IsNullOrEmpty(requestPath) && 
        requestPath.Contains("/Error", StringComparison.OrdinalIgnoreCase))
    {
        path = "/"; // don't send user from one error page to another
    }
    string cultureDisplayName = currentCulture.EnglishName;
    if (langNames.ContainsKey(currentCulture.Name))
    {
        cultureDisplayName = langNames[currentCulture.Name];
    }
}
<div data-component="language-switcher">
    <details>
         <summary @(currentCulture.TextInfo.IsRightToLeft ? "dir=rtl" : "")>
             <span lang="@currentPageCulture">@Html.Raw(cultureDisplayName)</span>
         </summary>
         <ul dir="ltr" aria-label="@Html.Raw(selectorTitle)" role="menu">
            @foreach (var supportedCulture in supportedCultures)
            {
                var lang = supportedCulture.Name;
                var langAtt = $"{MODIFY_ATTRIBUTE_PREFIX}lang=\"{lang}\"";
                var langPrefix = lang.Equals(defaultCulture, StringComparison.InvariantCultureIgnoreCase) ? "" : lang;
                string langSpecificUrl = "/" + $"{langPrefix.ToLowerInvariant().Trim('/')}/{path.TrimStart('/')}".Trim('/');
                var isRtlLang = supportedCulture.TextInfo.IsRightToLeft;
                var dirAtt = isRtlLang ? $"{MODIFY_ATTRIBUTE_PREFIX}dir=\"rtl\"" : "";
                var attributes = HtmlHelperExtensions.ConvertToHtmlAttributes(activeLanguages[lang]);
                var ariaAtt = "";
                var ariaVis = "";
                var ariaLabel = $"aria-label=\"{linkTitles[lang]}\"";
                if (currentPageCulture.Equals(lang, StringComparison.InvariantCultureIgnoreCase))
                {
                    ariaAtt = "aria-current=\"language\"";
                    ariaVis = "<span aria-hidden=\"true\">✓</span>";
                }
                <li>
                    <a href="@langSpecificUrl" @Html.Raw(langAtt) @Html.Raw(dirAtt) @Html.Raw(ariaLabel) @Html.Raw(ariaAtt) role="menuitem">
                        @Html.Raw(langNames[lang]) @Html.Raw(ariaVis)
                    </a>
                </li>
            }
        </ul>
    </details>
</div>